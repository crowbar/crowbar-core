#!/bin/bash
#
# Copyright 2011-2013, Dell
# Copyright 2013-2014, SUSE LINUX Products GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

die() {
    res=$1
    shift
    echo "$@"
    exit $res
}

echo "Checking Ceilometer"
echo "Finding ceilometer server..."
ceilometer_ip=$(knife_node_find 'roles:ceilometer-server' IP)
if ! [[ $ceilometer_ip ]]; then
   die 1 "Could not find ceilometer server."
fi
echo "Ceilometer server at $ceilometer_ip. Verifying meters..."

echo "Finding keystone..."
keystone_ip=$(knife_node_find 'roles:keystone-server' IP)
if [[ ! $keystone_ip ]]; then
    die 1 "Cannot find Keystone"
fi

export OS_AUTH_URL="http://$keystone_ip:5000/v2.0"
export OS_USERNAME="admin"
export OS_PASSWORD="crowbar"
export OS_TENANT_NAME="admin"
export CEILOMETER_URL="http://$ceilometer_ip:8777"

if [ -f /etc/redhat-release ]; then
  sudo yum --assumeyes install python-ceilometerclient python-novaclient python-neutronclient
elif [ -f /etc/SuSE-release ]; then
  sudo zypper -n install python-ceilometerclient python-novaclient python-neutronclient
else
  sudo apt-get install -y python-ceilometerclient python-novaclient python-neutronclient
fi

echo "Getting meter-list from ceilometer"
if ! ceilometer meter-list; then
  die 1 "Could not get meter-list from ceilometer"
fi

echo "Getting resource-list from ceilometer"
if ! ceilometer resource-list; then
  die 1 "Could not get resource-list from ceilometer"
fi


echo "Getting sample-list from ceilometer"
if ! ceilometer sample-list -m vcpus; then
  die 1 "Could not get sample-list from ceilometer"
fi

# Switch command line ceilometer tool to work with API version 2
export CEILOMETER_API_VERSION=2

echo "Deploying Nova VM."

images=($(nova image-list | grep "ACTIVE" | grep "ubuntu" | grep "\-image" | awk '{print $2}'))
echo $images
[[ ! $images ]] && die 1 "Could not find a test image to run on Nova"
test_image=${images[0]}
echo -e  "Selected image id: $test_image"

fixed_net=$(neutron net-list |grep fixed |awk '{print $2}')
instance_name="smoketest"
v_device="vdb"
volume_name="smoketest_metering_target"

echo "Adding smoke flavor"
flavor_rnd=$(( 100 + $RANDOM % 100))
nova flavor-create smoketest-${flavor_rnd} ${flavor_rnd} 512 2 1 || die 1 "Unable to create flavor"

nova volume-create --display_name $volume_name 2
volume_id=$(nova volume-list | grep $volume_name | awk {'print $2'})
nova boot --poll --image "$test_image" --flavor ${flavor_rnd} --nic net-id=$fixed_net "$instance_name" --meta description='Use for smoke testing purposes' && sleep 30
instance_id=$(nova list | grep $instance_name | awk {'print $2'})
echo -e "Instance_id:$instance_id\nVolume_id: $volume_id\nV_device:$v_device"
nova volume-attach $instance_id  $volume_id /dev/$v_device && sleep 5

until [[ "$(nova list | grep "$instance_name" | awk {'print $6'})" = "ACTIVE" ]]
  do
    echo "Sleeping for next 10 seconds"
    sleep 10;
  done
instance_id=$(nova list | grep "$instance_name" | awk '{print $2}')
echo "Created $instance_name instance with ID: $instance_id"

echo "Getting meter-list for test virtual machine from ceilometer"

for meter in cpu disk.ephemeral.size disk.root.size memory; do
  isok="false"
  for ((i=1; i<=60; i++)); do
    metrics=$(ceilometer meter-list | grep "$instance_id")
    if echo $metrics | grep -qs "${meter}"; then
      echo "Successfully fetched ${meter} meter attempt ${i}"
      isok="true"
      break
    else
      echo -ne "\r"
      echo -ne "Failed to fetch ${meter} meter attempt ${i}/60"
      #we need such huge timeout to be sure we fit into pipeline interval wich is 600 by default 20*60=1200
      sleep 20
    fi
  done
  echo ""
  if [ "${isok}" != "true" ] ; then
    die 1 "Failed to fetch ${meter} meter"
  fi
done

for meter in 'volume' 'volume\.size'; do
  isok="false"
  for ((i=1; i<=60; i++)); do
   echo -e "Processing metric: $meter"
    v_metrics=$(ceilometer meter-list | grep "$meter " | grep "$volume_id" | awk {'print $8'})
    if [[ $v_metrics ]]; then
      echo "Successfully fetched meter: ${meter} resource_id: $v_metrics attempt ${i}"
      isok="true"
      break
    else
      echo -ne "\r"
      echo -ne "Failed to fetch ${meter} meter attempt ${i}/60"
      #we need such huge timeout to be sure we fit into pipeline interval wich is 600 by default 20*60=1200
      sleep 20
    fi
  done
  echo ""
  if [ "${isok}" != "true" ] ; then
    die 1 "Failed to fetch ${meter} meter"
  fi
done

echo "$metrics";
echo "Cleaning up...";
nova volume-detach $instance_id $volume_id && sleep 5
nova delete "$instance_id";
nova volume-delete $volume_id
nova flavor-delete smoketest-${flavor_rnd}

echo "Ceilometer check passed.";
exit 0
