#!/bin/bash
#
# Copyright 2011-2013, Dell
# Copyright 2013-2014, SUSE LINUX Products GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This does a test deploy of Swift

overall_failure=0
die () { local _res=$1; shift; echo "$@"; exit $_res; }

[[ $DEBUG ]] && set -x
set -e

echo "Findind swift-proxy..."
proxy_ip=$(knife_node_find 'roles:swift-proxy' IP)
echo "Findind swift-dispersion..."
dispersion_ip=$(knife_node_find 'roles:swift-dispersion' IP)
echo "Findind keystone..."
keystone_ip=$(knife_node_find 'roles:keystone-server' IP)

if ! [[ $proxy_ip ]]; then
    die 1 "Could not find swift-proxy."
fi

if ! [[ $keystone_ip ]]; then
    die 1 "Could not find keystone."
fi
if ! [[ $dispersion_ip ]]; then
    die 1 "Could not find swift-dispersion."
fi

prop_file="$LOGDIR/swift-proposal.json"

crowbar swift proposal show `crowbar swift proposal list` >"$prop_file"

swift_user=$(grep service_user $prop_file | sed 's/[:,"]//g' | awk '{print $2}')
swift_pass=$(grep service_password $prop_file | sed 's/[:,"]//g' | awk '{print $2}')

if [ -f /etc/redhat-release ]; then
  sudo yum --assumeyes install python-swiftclient
elif [ -f /etc/SuSE-release ]; then
  sudo zypper -n in python-swiftclient
else
  sudo apt-get install -y python-swiftclient
fi

do_swift() {
    local swiftargs=(--os-username "$swift_user"
    --os-password "$swift_pass"
    --os-tenant-name service
    --os-auth-url "http://$keystone_ip:5000/v2.0")
    swift ${swiftargs[@]} $1 $2 $3 || return 1
}

echo "Testing Swift functionality..."
do_swift post testdir || die 1 "Could not create a container in Swift"
testfile=$(mktemp "$LOGDIR/swift-testfile-XXXXX")
outfile=$(mktemp "$LOGDIR/swift-outfile-XXXXX")
file=$(basename $testfile)
dd if=/dev/urandom of=$testfile bs=64K count=1
do_swift upload testdir $testfile || \
    die 1 "Could not store random information into Swift"
do_swift download testdir $file -o $outfile || \
    die 1 "Could not get our random data back from Swift"
do_swift delete testdir $file || \
    die 1 "Could not delete our random data back from Swift"
do_swift delete testdir || \
    die 1 "Could not delete container from Swift"
if [[ $(do_swift list testdir) ]]; then
    die 1 "Container list should be empty"
fi
echo "Swift deploy passed."

echo "Getting dispersion report..."
ssh root@$dispersion_ip sudo -u swift swift-dispersion-report || \
    die 1 "Could not get dispersion report"

exit $overall_failure
