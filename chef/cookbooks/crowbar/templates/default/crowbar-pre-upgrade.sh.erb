#!/bin/bash
#
# This does what is necessary directly before the start of OS upgrade

LOGFILE=/var/log/crowbar/node-upgrade.log
UPGRADEDIR=/var/lib/crowbar/upgrade
RUNDIR=/var/run/crowbar
RUNFILE=$RUNDIR/node-pre-upgrading
mkdir -p "`dirname "$LOGFILE"`"
exec >>"$LOGFILE" 2>&1

log()
{
    set +x
    echo "[$(date --iso-8601=ns)] [$$] $@"
    set -x
}

log "Executing $BASH_SOURCE"

set -x

mkdir -p $RUNDIR
mkdir -p $UPGRADEDIR
rm -f $UPGRADEDIR/crowbar-pre-upgrade-failed

if [[ -f $UPGRADEDIR/crowbar-pre-upgrade-ok ]] ; then
    log "Pre upgrade actions were already successfully executed"
    exit 0
fi

cleanup()
{
    log "Cleaning up after interrupt or exit"
    # cleanup upgrading indication so that the action can be restarted
    rm -f $RUNFILE

    exit 2
}

if [[ -f $RUNFILE ]] ; then
    log "Exit: Pre-Upgrade is already running..."
    exit 1
fi

# Signalize that the pre-upgrade script is running
touch $RUNFILE

trap cleanup INT EXIT

<% if @use_ha %>
# Shutdown corosync so the remaining OpenStack services are stopped
# This is needed so that the zypper dup won't trigger any db migrations on package update
service corosync stop

ret=$?
if [ $ret != 0 ] ; then
    log "Error occured during shutting down corosync service"
    echo $ret > $UPGRADEDIR/crowbar-pre-upgrade-failed
    exit $ret
fi

# Make sure sbd is shut down (if it was configured) before proceeding with next actions
if systemctl --quiet is-enabled sbd 2>/dev/null ; then
    SBD_PIDFILE=$(systemctl show sbd.service --property PIDFile | sed -n 's/^PIDFile=//p')
    while [ -e $SBD_PIDFILE ] ; do
        log "sbd is still active, waiting for shutdown"
        sleep 1
    done
fi

<% else %>

log "No HA setup found..."

<% end %>

<% if @compute_node %>

<% if @rabbitmq_cluster %>

# update rabbitmq config for clients if it was changed
zypper --non-interactive install crudini

crudini --set /etc/neutron/neutron.conf.d/200-crowbar-upgrade.conf oslo_messaging_rabbit rabbit_ha_queues true
crudini --set /etc/neutron/neutron.conf.d/200-crowbar-upgrade.conf oslo_messaging_rabbit amqp_durable_queues true

crudini --set /etc/nova/nova.conf.d/200-crowbar-upgrade.conf oslo_messaging_rabbit rabbit_ha_queues true
crudini --set /etc/nova/nova.conf.d/200-crowbar-upgrade.conf oslo_messaging_rabbit amqp_durable_queues true

<% if @cinder_volume %>
crudini --set /etc/cinder/cinder.conf.d/200-crowbar-upgrade.conf oslo_messaging_rabbit rabbit_ha_queues true
crudini --set /etc/cinder/cinder.conf.d/200-crowbar-upgrade.conf oslo_messaging_rabbit amqp_durable_queues true
<% end %>

<% end %>

log "Restarting services for Pike"

<% unless @remote_node %>
systemctl restart <%= @neutron_agent %>
<% end %>

<% if @l3_agent && !@remote_node %>
systemctl restart <%= @l3_agent %>
<% end %>

<% if @metadata_agent && !@remote_node%>
systemctl restart <%= @metadata_agent %>
<% end %>

<% if @remote_node %>
log "Leving nova-compute service to be restarted by cluster resources"
<% else %>
log "Starting nova-compute service"
systemctl restart openstack-nova-compute.service
<% end %>


<% if @cinder_volume %>
log "Upgrading and setting cinder-volume configuration"
systemctl restart openstack-cinder-volume.service
<% end %>

<% if @swift_storage %>
log "Restarting swift-storage services"
systemctl restart openstack-swift-account
systemctl restart openstack-swift-object
systemctl restart openstack-swift-container
<% end %>

<% end %>

touch $UPGRADEDIR/crowbar-pre-upgrade-ok
log "$BASH_SOURCE is finished."
